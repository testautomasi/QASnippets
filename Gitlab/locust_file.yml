image: ${CI_REGISTRY}/docker_image_path

variables:
  SLACK_WEBHOOK: "webhook_url"

stages:
  - performance_tests

.job_template:
  allow_failure: true
  before_script:
    - echo Calling job $CALLER_PIPELINE_URL
    - echo Calling project $CALLER_PROJECT_PATH
    - echo Job called at $CALLER_CALL_TIME
    - pip3 install -r requirements.txt
    - export ENV="$ENV"
    - STARTTIME=$(date -d '+5 hour 30 min' '+%T')    
    - echo "Starting the performance test at $STARTTIME"
    - echo $STARTTIME > starttime.txt
  after_script:
    - STARTTIME=$(cat starttime.txt)
    - ENDTIME=$(date -d '+5 hour 30 min' '+%T')
    - echo "Ending the performance test at $ENDTIME"
    - SLACK_MESSAGE="*Pipeline Name*:$JOB_NAME\n*Job Name*:$CI_JOB_NAME\n*Job Status*:$CI_JOB_STATUS\n*Environment*:$ENV\n*APIs Under Test*:$API\n*Number Of Threads*:$THREADS\n*Start Time*:$STARTTIME\n*End Time*:$ENDTIME\n*Performance Test Report*:<gitlab_instance_url>/-/jobs/$CI_JOB_ID/artifacts/locust_report.html"
    - echo "slack message payload is $SLACK_MESSAGE"
    - curl -X POST --data-urlencode "payload={\"channel\":\"$SLACK_CHANNEL\", \"username\":\"$USER_NAME\", \"text\":\"$SLACK_MESSAGE\" $SLACK_WEBHOOK;
    
  artifacts:
    when: always
    paths:
      - locust_report.html

performance_tests:
  extends:
    - .job_template
  stage: performance_tests
  script:
    - locust -f <locust_file_path> --headless -u $THREADS -r $RampTime --run-time $RunTime --host $BaseUrl --html=locust_report.html
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" &&  $ENV == "stage" &&  $TAGS=="conditional_tags"
